<?xml version="1.0" encoding="UTF-8"?>

<!--
    OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL  sys:user.home
    All:最低等级的，用于打开所有日志记录
    Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出
    Debug:指出细粒度信息事件对调试应用程序是非常有帮助的
    Info:消息在粗粒度级别上突出强调应用程序的运行过程
    Warn:输出警告及warn以下级别的日志
    -->
<configuration status="INFO" monitorInterval="30"><!-- 设置log4j2的自身log级别为warn 目前是每隔30秒检查一遍当前文件配置-->
    <!--
        根节点Configuration有两个属性:status和monitorinterval。
        status用来指定log4j本身的打印日志的级别；
        monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s。
     -->
    <appenders>
        <console name="Console" target="SYSTEM_OUT">
            <!--
                Console节点用来定义输出到控制台的Appender
                    name:指定Appender的名字.
                    name:指定Appender的名字.
a dcccc                     target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
                    PatternLayout:输出格式，不设置默认为:%m%n.
             -->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        </console>

        <RollingFile name="RollingFileInfo" fileName="../logs/log4js/info.log"
                     filePattern="./log4js/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <!--
                RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender
                    name:指定Appender的名字
                    fileName:指定输出日志的目的文件带全路径的文件名
                    PatternLayout:输出格式，不设置默认为:%m%n
                    filePattern:指定新建日志文件的名称格式
                    Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志
                        TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am
                        SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小
                        DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)
             -->
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %m%n"/><!-- 忽略日志发生位置（%l），交由上层负责识别 -->
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="../logs/log4js/warn.log"
                     filePattern="./log4js/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <ThresholdFilter level="WARN"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %m%n"/><!-- 忽略日志发生位置（%l），交由上层负责识别 -->
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="../logs/log4js/error.log"
                     filePattern="./log4js/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %m%n"/><!-- 忽略日志发生位置（%l），交由上层负责识别 -->
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

    </appenders>

    <loggers>
        <!--
            Loggers节点，常见的有两种:Root和Logger
                Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
                    level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF
                    AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender
                Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等
                    level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF
                    name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点
                    AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出
        -->
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!--<logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>-->

        <!-- name中的值为mybatis的DAO层接口包路径 -->
        <logger name="convergence.idao" level="DEBUG" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <root level="DEBUG">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>

</configuration>